% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/drive_read.R
\name{drive_read}
\alias{drive_read}
\title{Read a Drive file}
\usage{
drive_read(
  file,
  type = NULL,
  as = c("auto", "string", "raw", "json", "html", "xml"),
  ...
)
}
\arguments{
\item{file}{Something that identifies the file of interest on your Google
Drive. Can be a name or path, a file id or URL marked with \code{\link[=as_id]{as_id()}}, or a
\code{\link{dribble}}.}

\item{type}{Character. Only consulted if \code{file} is a native Google file.
Specifies the desired type of the exported file. Will be processed via
\code{\link[=drive_mime_type]{drive_mime_type()}}, so either a file extension like \code{"pdf"} or a full MIME
type like \code{"application/pdf"} is acceptable.}

\item{as}{How to process the response body.
\itemize{
\item "auto": Determine from the MIME type of the response.
\itemize{
\item "string" for \code{text/csv}, \code{text/plain}, or \code{text/tab-separated-values}
\item "json" for \code{application/json}
\item "html" for \code{text/html}
\item "xml" for \code{application/xml} or \code{text/xml}
\item "raw" otherwise
}
\item "string": \code{httr::content(x, as = "text", ...)}
\item "json": \code{httr::content(x, as = "parsed", type = "application/json", ...)}
which calls \code{jsonlite::fromJSON()}
\item "html": \code{httr::content(x, as = "parsed", type = "text/html", ...)} which
calls \code{xml2::read_html()}
\item "xml": \code{httr::content(x, as = "parsed", type = "text/xml", ...)} which
calls \code{xml2::read_xml()}
\item "raw": \code{httr::content(x, as = "raw")}
}}

\item{...}{Additional parameters passed along to body processing functions,
for example, the \code{encoding} of the input \code{file}.}
}
\value{
The content of \code{file}, in the form specified via \code{as}. When \code{as = "string"}, the content is (re-)encoded as UTF-8, which is also true, by
definition, for \code{as = "json"}. Any \code{encoding} parameter provided via \code{...}
is understood to describe the \emph{input} \code{file}.
}
\description{
This function reads the content of a Drive file into memory.
Some basic processing is available, but you might need to do additional
work to turn the content into an R object that is useful to you.

\code{\link[=drive_download]{drive_download()}} is the more generally useful function, but for certain
file types, such as comma-separated values (MIME type \code{text/csv}), it can
be handy to read data directly from Google Drive and avoid writing to disk.

Just as for \code{\link[=drive_download]{drive_download()}}, native Google file types, such as Google
Sheets or Docs, must be exported as a conventional MIME type. See the help
for \code{\link[=drive_download]{drive_download()}} for more about how that works and the examples
below.
}
\examples{
\dontshow{if (drive_has_token()) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
# plain text --> character vector
r_desc <- system.file("DESCRIPTION") \%>\%
  drive_upload()
r_desc \%>\%
  drive_read() \%>\%
  strsplit(split = "\n") \%>\%
  .[[1]]
if (require(readr)) {
  r_desc \%>\%
    drive_read() \%>\%
    readr::read_lines()
}

# clean up plain text
drive_rm(r_desc)

# comma-separated values --> data.frame or tibble
chicken_csv <- drive_example("chicken.csv") \%>\%
  drive_upload()
chicken_csv \%>\%
  drive_read() \%>\%
  read.csv(text = .)
if (require(readr)) {
  chicken_csv \%>\%
    drive_read() \%>\%
    readr::read_csv()
}

# clean up comma-separated values
drive_rm("chicken.csv")

# comma-separated values with latin-1 encoding --> data.frame or tibble
tfile <- tempfile()
curl::curl_download(
  "https://matthew-brett.github.io/cfd2019/data/imdblet_latin.csv",
  destfile = tfile
)
imdb_latin1 <- tfile \%>\%
  drive_upload(name = "imdb_latin1.csv")
imdb_latin1 \%>\%
  drive_read(encoding = "ISO-8859-1") \%>\% # "latin1" works too
  read.csv(text = .)
if (require(readr)) {
  imdb_latin1 \%>\%
    drive_read(encoding = "latin1") \%>\%  # "ISO-8859-1" works too
    readr::read_csv()
}

# clean up comma-separated values with latin-1 encoding
drive_rm(imdb_latin1)

# Google Doc --> character vector
chicken_doc <- drive_example("chicken.txt") \%>\%
  drive_upload(type = "document")
chicken_doc \%>\%
  # NOTE: we must specify an export MIME type
  drive_read(type = "text/plain") \%>\%
  strsplit(split = "(\r\n|\r|\n)") \%>\%
  .[[1]]

# clean up Google Doc
drive_rm(chicken_doc)

# JPEG --> raw --> raster
# https://stat.ethz.ch/R-manual/R-patched/doc/html/logo.jpg
if (require(jpeg)) {
  r_logo <- R.home("doc/html/logo.jpg") \%>\%
     drive_upload(name = "r_logo.jpg")
  img <- r_logo \%>\%
    drive_read() \%>\%
    jpeg::readJPEG()
  plot(0:1, 0:1, type = "n")
  rasterImage(img, 0, 0, 1, 1)

  # JPEG cleanup
  drive_rm(r_logo)
}

# html -> character vector
# https://stat.ethz.ch/R-manual/R-patched/doc/html/about.html
if (require(rvest) && require(readr)) {
  r_about <- R.home("doc/html/about.html") \%>\%
     drive_upload()
  r_about \%>\%
    drive_read() \%>\%
    rvest::html_text2() \%>\%
    readr::read_lines() \%>\%
    lapply(substr, start = 1, stop = 70)

  # html clean up
  drive_rm(r_about)
}

# html --> character vector
if (require(rvest) && require(stringi)) {
  tfile <- tempfile(fileext = ".html")
  curl::curl_download("https://httpbin.org/html", destfile = tfile)
  httpbin_html <- tfile \%>\%
    drive_upload(name = "httpbin.html")
  httpbin_html \%>\%
    drive_read() \%>\%
    rvest::html_text2() \%>\%
    stringi::stri_split_boundaries(type = "sentence") \%>\%
    lapply(substr, start = 1, stop = 70) \%>\%
    .[[1]] \%>\%
    head(6)

  # html clean up
  drive_rm(httpbin_html)
}

# xml --> list
if (require(xml2)) {
  tfile <- tempfile(fileext = ".xml")
  curl::curl_download("https://httpbin.org/xml", destfile = tfile)
  httpbin_xml <- tfile \%>\%
    drive_upload()
  httpbin_xml \%>\%
    drive_read() \%>\%
    xml2::as_list()

  # xml clean up
  drive_rm(httpbin_xml)
}

# json --> list
tfile <- tempfile(fileext = ".json")
curl::curl_download("https://httpbin.org/json", destfile = tfile)
httpbin_json <- tfile \%>\%
  drive_upload()
httpbin_json \%>\%
  drive_read()

# json clean up
drive_rm(httpbin_json)
\dontshow{\}) # examplesIf}
}
